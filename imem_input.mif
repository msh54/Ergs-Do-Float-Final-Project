-- null
DEPTH = 4096;
WIDTH = 32;
ADDRESS_RADIX = DEC;
DATA_RADIX = BIN;
CONTENT
BEGIN
    -- addi $r10, $r0, 1
0000 : 00101010100000000000000000000001;
    -- addi $r2, $r0, 0
0001 : 00101000100000000000000000000000;
    -- addi $r15, $r0, 12
0002 : 00101011110000000000000000001100;
    -- addi $r16, $r0, 3
0003 : 00101100000000000000000000000011;
    -- waitForStroke: nop
0004 : 00000000000000000000000000000000;
    -- addi $r7, $r17, 0
0005 : 00101001111000100000000000000000;
    -- nop
0006 : 00000000000000000000000000000000;
    -- bne $r26, $r10, 3 # Loop while Waiting for Stroke
0007 : 00010110100101000000000000000011;
    -- nop
0008 : 00000000000000000000000000000000;
    -- j waitForStrokeLow # only reached when $r26 = 1
0009 : 00001000000000000000000000010000;
    -- bne $r30, $r10, 3 # Jump to after the button was pushed
0010 : 00010111100101000000000000000011;
    -- nop
0011 : 00000000000000000000000000000000;
    -- j postData
0012 : 00001000000000000000000010010011;
    -- nop
0013 : 00000000000000000000000000000000;
    -- nop
0014 : 00000000000000000000000000000000;
    -- j waitForStroke
0015 : 00001000000000000000000000000100;
    -- waitForStrokeLow: nop
0016 : 00000000000000000000000000000000;
    -- addi $r7, $r19, 0
0017 : 00101001111001100000000000000000;
    -- nop
0018 : 00000000000000000000000000000000;
    -- bne $r26, $r0, 2 # Loop while Waiting for Stroke to be Low
0019 : 00010110100000000000000000000010;
    -- j startStroke # only reached when $r26 = 1
0020 : 00001000000000000000000000011010;
    -- bne $r30, $r10, 3 # Jump to after the button was pushed
0021 : 00010111100101000000000000000011;
    -- nop
0022 : 00000000000000000000000000000000;
    -- j postData
0023 : 00001000000000000000000010010011;
    -- nop
0024 : 00000000000000000000000000000000;
    -- j waitForStrokeLow
0025 : 00001000000000000000000000010000;
    -- startStroke: nop
0026 : 00000000000000000000000000000000;
    -- addi $r1, $r0, 0 # counter
0027 : 00101000010000000000000000000000;
    -- addi $r3, $r0, 20 # number of data points-1  that are taken
0028 : 00101000110000000000000000010100;
    -- addi $r19, $r0, 0 # reset consistency count
0029 : 00101100110000000000000000000000;
    -- addi $r20, $r17, 0 # load consistency
0030 : 00101101001000100000000000000000;
    -- takeSamples: nop
0031 : 00000000000000000000000000000000;
    -- blt $r3, $r1, 108 # Run until $r3 + 1 samples postSample
0032 : 00110000110000100000000001101100;
    -- add $r4, $r2, $r1 # Update Address to Store
0033 : 00000001000001000001000000000000;
    -- waitForDataHigh: nop
0034 : 00000000000000000000000000000000;
    -- bne $r28, $r10, 2 # Loop while data not ready
0035 : 00010111000101000000000000000010;
    -- j exitWaitForDataHigh
0036 : 00001000000000000000000000101100;
    -- bne $r30, $r10, 3 # Jump to after the final button was pushed
0037 : 00010111100101000000000000000011;
    -- nop
0038 : 00000000000000000000000000000000;
    -- j postData
0039 : 00001000000000000000000010010011;
    -- bne $r26, $r10, 2
0040 : 00010110100101000000000000000010;
    -- j waitForStrokeLow
0041 : 00001000000000000000000000010000;
    -- nop
0042 : 00000000000000000000000000000000;
    -- j waitForDataHigh
0043 : 00001000000000000000000000100010;
    -- exitWaitForDataHigh: nop
0044 : 00000000000000000000000000000000;
    -- retryDataRead: nop
0045 : 00000000000000000000000000000000;
    -- sll $r6, $r10, 0
0046 : 00000001100101000000000000010000;
    -- bne $r29, $r6, 3 
0047 : 00010111010011000000000000000011;
    -- addi $r27, $r0, 1
0048 : 00101110110000000000000000000001;
    -- j nextRead
0049 : 00001000000000000000000001110000;
    -- sll $r6, $r10, 1
0050 : 00000001100101000000000010010000;
    -- bne $r29, $r6, 3
0051 : 00010111010011000000000000000011;
    -- addi $r27, $r0, 2
0052 : 00101110110000000000000000000010;
    -- j nextRead
0053 : 00001000000000000000000001110000;
    -- sll $r6, $r10, 2
0054 : 00000001100101000000000100010000;
    -- bne $r29, $r6, 3 
0055 : 00010111010011000000000000000011;
    -- addi $r27, $r0, 3
0056 : 00101110110000000000000000000011;
    -- j nextRead
0057 : 00001000000000000000000001110000;
    -- sll $r6, $r10, 3
0058 : 00000001100101000000000110010000;
    -- bne $r29, $r6, 3 
0059 : 00010111010011000000000000000011;
    -- addi $r27, $r0, 4
0060 : 00101110110000000000000000000100;
    -- j nextRead
0061 : 00001000000000000000000001110000;
    -- sll $r6, $r10, 4
0062 : 00000001100101000000001000010000;
    -- bne $r29, $r6, 3 
0063 : 00010111010011000000000000000011;
    -- addi $r27, $r0, 5
0064 : 00101110110000000000000000000101;
    -- j nextRead
0065 : 00001000000000000000000001110000;
    -- sll $r6, $r10, 5
0066 : 00000001100101000000001010010000;
    -- bne $r29, $r6, 3 
0067 : 00010111010011000000000000000011;
    -- addi $r27, $r0, 6
0068 : 00101110110000000000000000000110;
    -- j nextRead
0069 : 00001000000000000000000001110000;
    -- sll $r6, $r10, 6
0070 : 00000001100101000000001100010000;
    -- bne $r29, $r6, 3 
0071 : 00010111010011000000000000000011;
    -- addi $r27, $r0, 7
0072 : 00101110110000000000000000000111;
    -- j nextRead
0073 : 00001000000000000000000001110000;
    -- sll $r6, $r10, 7
0074 : 00000001100101000000001110010000;
    -- bne $r29, $r6, 3 
0075 : 00010111010011000000000000000011;
    -- addi $r27, $r0, 8
0076 : 00101110110000000000000000001000;
    -- j nextRead
0077 : 00001000000000000000000001110000;
    -- sll $r6, $r10, 8
0078 : 00000001100101000000010000010000;
    -- bne $r29, $r6, 3 
0079 : 00010111010011000000000000000011;
    -- addi $r27, $r0, 9
0080 : 00101110110000000000000000001001;
    -- j nextRead
0081 : 00001000000000000000000001110000;
    -- sll $r6, $r10, 9
0082 : 00000001100101000000010010010000;
    -- bne $r29, $r6, 3 
0083 : 00010111010011000000000000000011;
    -- addi $r27, $r0, 10
0084 : 00101110110000000000000000001010;
    -- j nextRead
0085 : 00001000000000000000000001110000;
    -- sll $r6, $r10, 10
0086 : 00000001100101000000010100010000;
    -- bne $r29, $r6, 3 
0087 : 00010111010011000000000000000011;
    -- addi $r27, $r0, 11
0088 : 00101110110000000000000000001011;
    -- j nextRead
0089 : 00001000000000000000000001110000;
    -- sll $r6, $r10, 11
0090 : 00000001100101000000010110010000;
    -- bne $r29, $r6, 3 
0091 : 00010111010011000000000000000011;
    -- addi $r27, $r0, 12
0092 : 00101110110000000000000000001100;
    -- j nextRead
0093 : 00001000000000000000000001110000;
    -- sll $r6, $r10, 12
0094 : 00000001100101000000011000010000;
    -- bne $r29, $r6, 3 
0095 : 00010111010011000000000000000011;
    -- addi $r27, $r0, 13
0096 : 00101110110000000000000000001101;
    -- j nextRead
0097 : 00001000000000000000000001110000;
    -- sll $r6, $r10, 13
0098 : 00000001100101000000011010010000;
    -- bne $r29, $r6, 3 
0099 : 00010111010011000000000000000011;
    -- addi $r27, $r0, 14
0100 : 00101110110000000000000000001110;
    -- j nextRead
0101 : 00001000000000000000000001110000;
    -- sll $r6, $r10, 14
0102 : 00000001100101000000011100010000;
    -- bne $r29, $r6, 3 
0103 : 00010111010011000000000000000011;
    -- addi $r27, $r0, 15
0104 : 00101110110000000000000000001111;
    -- j nextRead
0105 : 00001000000000000000000001110000;
    -- sll $r6, $r10, 15
0106 : 00000001100101000000011110010000;
    -- bne $r29, $r6, 3 
0107 : 00010111010011000000000000000011;
    -- addi $r27, $r0, 16
0108 : 00101110110000000000000000010000;
    -- j nextRead
0109 : 00001000000000000000000001110000;
    -- nop #bne $r29, $r0, 2
0110 : 00000000000000000000000000000000;
    -- j retryDataRead
0111 : 00001000000000000000000000101101;
    -- nextRead: nop
0112 : 00000000000000000000000000000000;
    -- add $r11, $r4, $r3
0113 : 00000010110010000011000000000000;
    -- addi $r11, $r11, 1 # 11 is the address for the next read
0114 : 00101010110101100000000000000001;
    -- add $r18, $r11, $r3
0115 : 00000100100101100011000000000000;
    -- addi $r18, $r18, 1 # 11 is the address of the rolling sum
0116 : 00101100101001000000000000000001;
    -- lw $r5, 0($r4) # store and load old values
0117 : 01000001010010000000000000000000;
    -- sw $r5, 0($r11)
0118 : 00111001010101100000000000000000;
    -- sw $r27, 0($r4)
0119 : 00111110110010000000000000000000;
    -- bne $r5, $r27, 2 # Add to consistency count if equal
0120 : 00010001011101100000000000000010;
    -- addi $r19, $r19, 1
0121 : 00101100111001100000000000000001;
    -- addi $r15, $r19, 0 # consistency count
0122 : 00101011111001100000000000000000;
    -- addi $r16, $r3, 1 # number of samples
0123 : 00101100000001100000000000000001;
    -- nop
0124 : 00000000000000000000000000000000;
    -- nop
0125 : 00000000000000000000000000000000;
    -- addi $r1, $r1, 1 # Increment loop
0126 : 00101000010000100000000000000001;
    -- addi $r7, $r1, 0
0127 : 00101001110000100000000000000000;
    -- waitForDataLow: nop
0128 : 00000000000000000000000000000000;
    -- bne $r28, $r0, 2 # Loop while data not ready
0129 : 00010111000000000000000000000010;
    -- j exitWaitForDataLow
0130 : 00001000000000000000000010001001;
    -- bne $r30, $r10, 2 # Jump to after the button was pushed
0131 : 00010111100101000000000000000010;
    -- j postData
0132 : 00001000000000000000000010010011;
    -- bne $r26, $r10, 2
0133 : 00010110100101000000000000000010;
    -- j waitForStrokeLow
0134 : 00001000000000000000000000010000;
    -- nop
0135 : 00000000000000000000000000000000;
    -- j waitForDataLow
0136 : 00001000000000000000000010000000;
    -- exitWaitForDataLow: nop
0137 : 00000000000000000000000000000000;
    -- j takeSamples # 74
0138 : 00001000000000000000000000011111;
    -- nop
0139 : 00000000000000000000000000000000;
    -- postSample: nop
0140 : 00000000000000000000000000000000;
    -- nop #add $r2, $r2, $r3 use this if we were planning to store multiple samples
0141 : 00000000000000000000000000000000;
    -- nop #addi $r27, $r2, 0
0142 : 00000000000000000000000000000000;
    -- addi $r1, $r0, 0
0143 : 00101000010000000000000000000000;
    -- j waitForStroke
0144 : 00001000000000000000000000000100;
    -- nop
0145 : 00000000000000000000000000000000;
    -- nop
0146 : 00000000000000000000000000000000;
    -- postData: nop
0147 : 00000000000000000000000000000000;
    -- addi $r1, $r0, 0 # counter
0148 : 00101000010000000000000000000000;
    -- addi $r3, $r0, 50 #number of data points that are taken
0149 : 00101000110000000000000000110010;
    -- addi $r2, $r0, 0 # Base address storing height data
0150 : 00101000100000000000000000000000;
    -- nop #addi $r27, $r0, 60
0151 : 00000000000000000000000000000000;
    -- loadData: nop
0152 : 00000000000000000000000000000000;
    -- waitForButtonHigh: nop
0153 : 00000000000000000000000000000000;
    -- bne $r30, $r10, 2 # Loop while data not ready
0154 : 00010111100101000000000000000010;
    -- j exitWaitForButtonHigh
0155 : 00001000000000000000000010100011;
    -- bne $r30, $r10, 3 # Jump to after the final button was pushed
0156 : 00010111100101000000000000000011;
    -- nop
0157 : 00000000000000000000000000000000;
    -- nop
0158 : 00000000000000000000000000000000;
    -- bne $r26, $r10, 2
0159 : 00010110100101000000000000000010;
    -- nop # j waitForStrokeLow
0160 : 00000000000000000000000000000000;
    -- nop
0161 : 00000000000000000000000000000000;
    -- j waitForButtonHigh
0162 : 00001000000000000000000010011001;
    -- exitWaitForButtonHigh: nop
0163 : 00000000000000000000000000000000;
    -- blt $r3, $r1, end # Run until 400 samples
0164 : 00110000110000100000000000010000;
    -- add $r4, $r2, $r1
0165 : 00000001000001000001000000000000;
    -- lw $r27, 0($r4)
0166 : 01000110110010000000000000000000;
    -- add $r7, $r1, $r0
0167 : 00000001110000100000000000000000;
    -- addi $r1, $r1, 1
0168 : 00101000010000100000000000000001;
    -- waitForButtonLow: nop
0169 : 00000000000000000000000000000000;
    -- bne $r30, $r0, 2 # Loop while data not ready
0170 : 00010111100000000000000000000010;
    -- j exitWaitForButtonLow
0171 : 00001000000000000000000010110011;
    -- bne $r30, $r10, 3 # Jump to after the final button was pushed
0172 : 00010111100101000000000000000011;
    -- nop
0173 : 00000000000000000000000000000000;
    -- nop
0174 : 00000000000000000000000000000000;
    -- bne $r26, $r10, 2
0175 : 00010110100101000000000000000010;
    -- nop
0176 : 00000000000000000000000000000000;
    -- nop
0177 : 00000000000000000000000000000000;
    -- j waitForButtonLow
0178 : 00001000000000000000000010101001;
    -- exitWaitForButtonLow: nop
0179 : 00000000000000000000000000000000;
    -- j loadData
0180 : 00001000000000000000000010011000;
    -- end: nop
0181 : 00000000000000000000000000000000;
    -- j end
0182 : 00001000000000000000000010110101;
[0183 .. 4095] : 00000000000000000000000000000000;
END;

